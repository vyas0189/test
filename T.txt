package com.example.recipes

import org.openrewrite.ExecutionContext
import org.openrewrite.Recipe
import org.openrewrite.TreeVisitor
import org.openrewrite.text.PlainText
import org.openrewrite.text.PlainTextVisitor

class UpdateZoneIdToAuto : Recipe() {
    
    override fun getDisplayName(): String = "Update zone_id value to auto"
    
    override fun getDescription(): String = "Updates the value of zone_id key to 'auto' in text files"
    
    override fun getVisitor(): TreeVisitor<*, ExecutionContext> {
        return ZoneIdUpdaterVisitor()
    }
}

class ZoneIdUpdaterVisitor : PlainTextVisitor<ExecutionContext>() {
    
    override fun visitText(text: PlainText, ctx: ExecutionContext): PlainText {
        val content = text.text
        
        // Pattern to match zone_id with various formats
        val patterns = listOf(
            // JSON-like format: "zone_id": "value"
            Regex("""("zone_id"\s*:\s*)"[^"]*""""),
            // YAML-like format: zone_id: value
            Regex("""(zone_id\s*:\s*)[^\s\n]+"""),
            // Properties format: zone_id=value
            Regex("""(zone_id\s*=\s*)[^\s\n]+"""),
            // XML-like attribute: zone_id="value"
            Regex("""(zone_id\s*=\s*)"[^"]*""""),
            // TOML format: zone_id = "value"
            Regex("""(zone_id\s*=\s*)"[^"]*"""")
        )
        
        var updatedContent = content
        var wasUpdated = false
        
        // Try each pattern and update if found
        for (pattern in patterns) {
            val newContent = pattern.replace(updatedContent) { matchResult ->
                wasUpdated = true
                val prefix = matchResult.groupValues[1]
                when {
                    // JSON format
                    prefix.contains(":") && prefix.contains("\"") -> "${prefix}\"auto\""
                    // YAML format (no quotes needed typically)
                    prefix.contains(":") -> "${prefix}auto"
                    // Properties format
                    prefix.contains("=") && !prefix.contains("\"") -> "${prefix}auto"
                    // XML/TOML format with quotes
                    prefix.contains("=") && prefix.contains("\"") -> "${prefix}\"auto\""
                    else -> "${prefix}auto"
                }
            }
            
            if (newContent != updatedContent) {
                updatedContent = newContent
                break // Found and updated, no need to try other patterns
            }
        }
        
        return if (wasUpdated) {
            text.withText(updatedContent)
        } else {
            text
        }
    }
}

// Alternative more specific visitor if you know the exact format
class JsonZoneIdUpdaterVisitor : PlainTextVisitor<ExecutionContext>() {
    
    override fun visitText(text: PlainText, ctx: ExecutionContext): PlainText {
        val content = text.text
        
        // Specifically for JSON format: "zone_id": "any_value"
        val jsonPattern = Regex("""("zone_id"\s*:\s*)"[^"]*"""")
        
        val updatedContent = jsonPattern.replace(content) { matchResult ->
            """${matchResult.groupValues[1]}"auto""""
        }
        
        return if (updatedContent != content) {
            text.withText(updatedContent)
        } else {
            text
        }
    }
}

// Alternative for YAML format specifically
class YamlZoneIdUpdaterVisitor : PlainTextVisitor<ExecutionContext>() {
    
    override fun visitText(text: PlainText, ctx: ExecutionContext): PlainText {
        val content = text.text
        
        // Specifically for YAML format: zone_id: any_value
        val yamlPattern = Regex("""(zone_id\s*:\s*)[^\s\n]+""")
        
        val updatedContent = yamlPattern.replace(content) { matchResult ->
            "${matchResult.groupValues[1]}auto"
        }
        
        return if (updatedContent != content) {
            text.withText(updatedContent)
        } else {
            text
        }
    }
}
