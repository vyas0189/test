import json
import logging
from flask import Flask, request, jsonify

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

@app.route('/bitbucket-webhook', methods=['POST'])
def bitbucket_webhook():
    try:
        event_key = request.headers.get('X-Event-Key', 'unknown')
        payload = request.get_json(silent=True)

        if payload is None:
            msg = "No JSON payload received"
            logger.error(msg)
            return jsonify({"status": "error", "message": msg}), 400

        # Print the payload in JSON format with indentation for readability
        formatted_payload = json.dumps(payload, indent=4)
        logger.info("Received payload:\n%s", formatted_payload)

        # Handle events based on the event key
        if event_key == "pullrequest:comment_created":
            pr_id = payload.get("pullrequest", {}).get("id", "unknown")
            logger.info("Comment added on PR: %s", pr_id)
        elif event_key == "pullrequest:approved":
            pr_id = payload.get("pullrequest", {}).get("id", "unknown")
            logger.info("PR Approved: %s", pr_id)
        elif event_key == "pullrequest:rejected":
            pr_id = payload.get("pullrequest", {}).get("id", "unknown")
            logger.info("PR Declined: %s", pr_id)
        else:
            logger.warning("Unhandled event: %s", event_key)

        return jsonify({"status": "ok"}), 200

    except Exception as e:
        logger.exception("Error processing webhook:")
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == '__main__':
    app.run(port=3000, debug=True)
